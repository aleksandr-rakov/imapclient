Dev
---
[API CHANGE] (#58) The response values for BODY and BODYSTRUCTURE
responses may include a sequence of tuples which are not separated by
whitespace. These should be treated as a single item (a list of
multiple arbitrarily nested tuples) but IMAPClient was treating them
as separate items. IMAPClient now returns these tuples in a list to
allow for consistent parsing.

A BODYSTRUCTURE response for a multipart email with 2 parts would have
previously looked something like this::

  (('text', 'html', ('charset', 'us-ascii'), None, None, 'quoted-printable', 55, 3),
   ('text', 'plain', ('charset', 'us-ascii'), None, None, '7bit', 26, 1), 
   'mixed', ('boundary', '===============1534046211=='))

The response is now returned like this::

  ([
     ('text', 'html', ('charset', 'us-ascii'), None, None, 'quoted-printable', 55, 3),
     ('text', 'plain', ('charset', 'us-ascii'), None, None, '7bit', 26, 1) 
   ], 
   'mixed', ('boundary', '===============1534046211=='))

The behaviour for single part messages is unchanged. In this case the
first element of the tuple is a string specifying the major content
type of the message (eg "text"). 

An is_multipart boolean property now exists on BODY and BODYSTRUCTURE
responses to allow the caller to easily determine whether the response
is for a multipart message.

Code that expects the previous response handling behaviour needs to be
updated.

Version 0.6.2
-------------
Square brackets in responses are now parsed correctly. This fixes
response handling for FETCH items such as "BODY[HEADER.FIELDS (from
subject)]". (#55)

The example has been moved to imapclient/examples directory and is
included when the IMAPClient is installed from PyPI. (#56)

The project is now packaged using Distribute instead of
setuptools. There should be no real functional change. (#57)

Version 0.6.1
-------------
Automatically patch a bug in imaplib which can cause hangs when using
SSL (Python Issue 5949). The patch is only applied when the running
Python version is known to be affected by the problem.

Updated the README to better reflect the current state of the project.

Version 0.6
-----------
Command response lexing and parsing code rewritten from stratch to
deal with various bugs that surfaced when dealing with more complex
responses (eg. BODYSTRUCTURE and ENVELOPE). This change also fixes
various problems when interacting with Gmail and MS Exchange. 
(#1, #45)

[NEW] XLIST extension support. Where the server supports it,
xlist_folders() will return a mapping of various common folder names
to the actual server folder names. Gmail's IMAP server supports
this. (#25)

[NEW] Added COPY command support (copy() method). (#36)

[NEW] Added interact.py, a script for interactive IMAPClient
sessions. Useful for debugging and exploration. Uses IPython if
installed.

[API CHANGE] select_folder() now returns a dictionary with the full
(parsed) SELECT command response instead of just the message
count. (#24)

[API CHANGE] the return value from list_folders(), list_sub_folders()
and xlist_folders() now include the IMAP folder flags and
delimiter. (#24)

[API CHANGE] Bytes that are greater than 0x7f in folder names are will
cause an exception when passed to methods that accept folder name
arguments because there is no unambigous way to handle these. Encode
these to unicode objects first. (#21)

[API CHANGE] Folder names are now always returned as unicode objects. (#21)

[API CHANGE] Fetch responses now include a "SEQ" element which gives
the message (non-UID) sequence number. This allows mapping between
UIDs and standard sequence IDs.

[FIX] Various folder name handling bugs fixed. (#28, #42)


Version 0.5.2
-------------
Correctly handle double quotes and backslashes in folder names when
parsing LIST and LSUB responses. (#28)

Fixed problem with parsing responses where a literal followed another
literal. (#33)


Version 0.5.1
-------------
Changed license from GPL to new BSD.


Version 0.5
-----------
Support for SSL based connections.

Folder names are now encoded and decoded transparently if required (using
modified UTF-7). This means that any methods that return folder names may
return unicode objects as well as normal strings [API CHANGE]. Additionally,
any method that takes a folder name now accepts unicode object too. Use the
folder_encode attribute to control whether encode/decoding is performed.

Unquoted folder names in server responses are now handled correctly. Thanks
to Neil Martinsen-Burrell for reporting this bug.

Fixed a bug with handling of unusual characters in folder names.

Timezones are now handled correctly for datetimes passed as input and for
server responses. This fixes a number of bugs with timezones. Returned
datetimes are always in the client's local timezone [API CHANGE].

Many more unit tests, some using Michael Foord's excellent mock.py.
(http://www.voidspace.org.uk/python/mock/)


